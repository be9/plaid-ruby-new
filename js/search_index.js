var search_data = {"index":{"searchIndex":["plaid","account","badrequesterror","category","connector","income","info","institution","notconfigurederror","notfounderror","plaiderror","requestfailederror","risk","servererror","transaction","unauthorizederror","user","all()","all()","auth()","balance()","config()","create()","delete()","for_product()","get()","get()","get()","income()","info()","initial_transactions()","inspect()","inspect()","longtail()","mfa()","mfa?()","mfa_request()","mfa_required?()","new()","new()","new()","new()","revive()","risk()","search()","to_s()","to_s()","transactions()","update()","upgrade()","license","readme"],"longSearchIndex":["plaid","plaid::account","plaid::badrequesterror","plaid::category","plaid::connector","plaid::income","plaid::info","plaid::institution","plaid::notconfigurederror","plaid::notfounderror","plaid::plaiderror","plaid::requestfailederror","plaid::risk","plaid::servererror","plaid::transaction","plaid::unauthorizederror","plaid::user","plaid::category::all()","plaid::institution::all()","plaid::user#auth()","plaid::user#balance()","plaid::config()","plaid::user::create()","plaid::user#delete()","plaid::user#for_product()","plaid::category::get()","plaid::connector#get()","plaid::institution::get()","plaid::user#income()","plaid::user#info()","plaid::user#initial_transactions()","plaid::category#inspect()","plaid::institution#inspect()","plaid::institution::longtail()","plaid::user#mfa()","plaid::connector#mfa?()","plaid::user#mfa_request()","plaid::user#mfa_required?()","plaid::category::new()","plaid::connector::new()","plaid::institution::new()","plaid::plaiderror::new()","plaid::user::revive()","plaid::user#risk()","plaid::institution::search()","plaid::category#to_s()","plaid::institution#to_s()","plaid::user#transactions()","plaid::user#update()","plaid::user#upgrade()","",""],"info":[["Plaid","","classes/Plaid.html","",""],["Plaid::Account","","classes/Plaid/Account.html","","<p>Representation of account data.\n"],["Plaid::BadRequestError","","classes/Plaid/BadRequestError.html","","<p>Exception which is thrown when Plaid API returns a 400 response.\n"],["Plaid::Category","","classes/Plaid/Category.html","","<p>A class which encapsulates information about a Plaid category.\n"],["Plaid::Connector","","classes/Plaid/Connector.html","","<p>Private: A class encapsulating HTTP requests to the Plaid API servers\n"],["Plaid::Income","","classes/Plaid/Income.html","","<p>Representation of income data.\n"],["Plaid::Info","","classes/Plaid/Info.html","","<p>Representation of user information.\n"],["Plaid::Institution","","classes/Plaid/Institution.html","","<p>A class encapsulating information about a Financial Institution supported\nby Plaid.\n"],["Plaid::NotConfiguredError","","classes/Plaid/NotConfiguredError.html","","<p>Exception to throw when there are configuration problems\n"],["Plaid::NotFoundError","","classes/Plaid/NotFoundError.html","","<p>Exception which is thrown when Plaid API returns a 404 response.\n"],["Plaid::PlaidError","","classes/Plaid/PlaidError.html","","<p>Private: Base class for Plaid errors\n"],["Plaid::RequestFailedError","","classes/Plaid/RequestFailedError.html","","<p>Exception which is thrown when Plaid API returns a 402 response.\n"],["Plaid::Risk","","classes/Plaid/Risk.html","","<p>Representation of risk data.\n"],["Plaid::ServerError","","classes/Plaid/ServerError.html","","<p>Exception which is thrown when Plaid API returns a response which is\nneither 2xx, nor 4xx. Presumably …\n"],["Plaid::Transaction","","classes/Plaid/Transaction.html","","<p>Representation of a transaction.\n"],["Plaid::UnauthorizedError","","classes/Plaid/UnauthorizedError.html","","<p>Exception which is thrown when Plaid API returns a 401 response.\n"],["Plaid::User","","classes/Plaid/User.html","","<p>A class which encapsulates the authenticated user for all Plaid products.\n"],["all","Plaid::Category","classes/Plaid/Category.html#method-c-all","()","<p>Get information about all available categories.\n<p>Does a GET /categories call.\n<p>Returns\n"],["all","Plaid::Institution","classes/Plaid/Institution.html#method-c-all","()","<p>Get information about the Financial Institutions currently supported by\nPlaid.\n<p>Does a GET /institutions …\n"],["auth","Plaid::User","classes/Plaid/User.html#method-i-auth","()","<p>Get auth information for the user.\n<p>Does a POST /auth/get request.\n<p>Returns\n"],["balance","Plaid::User","classes/Plaid/User.html#method-i-balance","()","<p>Get current account balance.\n<p>Does a POST /balance request.\n<p>Returns\n"],["config","Plaid","classes/Plaid.html#method-c-config","()","<p>A helper function to ease configuration.\n<p>Yields self.\n<p>Examples\n"],["create","Plaid::User","classes/Plaid/User.html#method-c-create","(product, institution, username, password, pin = nil, options = {})","<p>Create (add) a user.\n<p>product &mdash; The Symbol product name you are adding the user to, one of Plaid::PRODUCTS\n…\n"],["delete","Plaid::User","classes/Plaid/User.html#method-i-delete","()","<p>Delete the user.\n<p>Returns\n<p>Returns true if deletion went ok.\n"],["for_product","Plaid::User","classes/Plaid/User.html#method-i-for_product","(product)","<p>Get the current user tied to another product.\n<p>No API request is made, just the current product is changed. …\n"],["get","Plaid::Category","classes/Plaid/Category.html#method-c-get","(id)","<p>Get information about a given category.\n<p>Does a GET /categories/:id call.\n<p>id &mdash; the String category ID (e.g. …\n"],["get","Plaid::Connector","classes/Plaid/Connector.html#method-i-get","()","<p>Private: Run GET request.\n<p>Returns\n<p>Returns the parsed JSON body.\n"],["get","Plaid::Institution","classes/Plaid/Institution.html#method-c-get","(id)","<p>Get information about a given Financial Institution.\n<p>Does a GET /institutions/:id call.\n<p>id &mdash; the String institution …\n"],["income","Plaid::User","classes/Plaid/User.html#method-i-income","()","<p>Get income data for the user.\n<p>Does a POST /income/get request.\n<p>Returns\n"],["info","Plaid::User","classes/Plaid/User.html#method-i-info","()","<p>Get info for the user.\n<p>Does a POST /info/get request.\n<p>Returns\n"],["initial_transactions","Plaid::User","classes/Plaid/User.html#method-i-initial_transactions","()","<p>Get transactions provided by initial call to User.create.\n<p>If the :login_only option of User.create is …\n"],["inspect","Plaid::Category","classes/Plaid/Category.html#method-i-inspect","()","<p>Get a String representation of Category.\n<p>Returns\n<p>Returns a String.\n"],["inspect","Plaid::Institution","classes/Plaid/Institution.html#method-i-inspect","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["longtail","Plaid::Institution","classes/Plaid/Institution.html#method-c-longtail","(count: 50, offset: 0)","<p>Get information about the “long tail” institutions supported by Plaid via\npartnerships.\n<p>Does …\n"],["mfa","Plaid::User","classes/Plaid/User.html#method-i-mfa","(info)","<p>Submit MFA information.\n<p>info &mdash; The String with MFA information.\n\n<p>Returns\n"],["mfa?","Plaid::Connector","classes/Plaid/Connector.html#method-i-mfa-3F","()","<p>Private: Check if MFA response received.\n<p>Returns\n<p>Returns true if response has code 201.\n"],["mfa_request","Plaid::User","classes/Plaid/User.html#method-i-mfa_request","(send_method = {})","<p>Initiate MFA.\n<p>send_method &mdash; The Hash which specifies which code delivery method to use.\n\n<p>Examples\n"],["mfa_required?","Plaid::User","classes/Plaid/User.html#method-i-mfa_required-3F","()","<p>Find out if MFA is required based on last request.\n<p>After calling e.g. User.create you might need to make …\n"],["new","Plaid::Category","classes/Plaid/Category.html#method-c-new","(fields)","<p>Private: Initialize a Category with given fields.\n"],["new","Plaid::Connector","classes/Plaid/Connector.html#method-c-new","(path, id = nil)","<p>Private: Prepare to run request.\n<p>path &mdash; The String path without leading slash. E.g. &#39;connect&#39;\n\n"],["new","Plaid::Institution","classes/Plaid/Institution.html#method-c-new","(fields)","<p>Private: Initialize an Institution with given fields.\n"],["new","Plaid::PlaidError","classes/Plaid/PlaidError.html#method-c-new","(code, message, resolve)","<p>Private: Initialize a error with proper attributes.\n<p>code &mdash; The Integer code (e.g. 1501).\n<p>message &mdash; The String …\n"],["revive","Plaid::User","classes/Plaid/User.html#method-c-revive","(token)","<p>Get User instance in case user access token is known.\n<p>token &mdash; the String access token for the user.\n\n"],["risk","Plaid::User","classes/Plaid/User.html#method-i-risk","()","<p>Get risk data for the user.\n<p>Does a POST /risk/get request.\n<p>Returns\n"],["search","Plaid::Institution","classes/Plaid/Institution.html#method-c-search","(query: nil, product: nil, id: nil)","<p>Search institutions.\n<p>query &mdash; The String search query to match against the full list of institutions.\nPartial …\n"],["to_s","Plaid::Category","classes/Plaid/Category.html#method-i-to_s","()","<p>Get a String representation of Category.\n<p>Returns\n<p>Returns a String.\n"],["to_s","Plaid::Institution","classes/Plaid/Institution.html#method-i-to_s","()","<p>Get a String representation of the institution.\n<p>Returns\n<p>Returns a String.\n"],["transactions","Plaid::User","classes/Plaid/User.html#method-i-transactions","(pending: false, account_id: nil, start_date: nil, end_date: nil)","<p>Get transactions.\n<p>Does a /connect/get call.\n<p>pending &mdash; the Boolean flag requesting to return pending transactions. …\n"],["update","Plaid::User","classes/Plaid/User.html#method-i-update","(username, password, pin = nil)","<p>Update user credentials.\n<p>Updates the credentials for current product. Use User#for_product\n<p>username &mdash; The …\n"],["upgrade","Plaid::User","classes/Plaid/User.html#method-i-upgrade","(product)","<p>Upgrade the user.\n<p>For an existing user that has been added via any of products (:connect,\n:auth, :income, …\n"],["LICENSE","","files/LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2016 Plaid Technologies, Inc.\n<p>Permission is hereby granted, free of …\n"],["README","","files/README_md.html","","<p>Plaid\n<p>Welcome to your new gem! In this directory, you&#39;ll find the files you\nneed to be able to package …\n"]]}}